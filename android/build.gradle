import java.nio.file.Paths

buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  repositories {
    google()
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:8.7.2'
  }
}

apply plugin: 'com.android.library'

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['RNCryptopp_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['RNCryptopp_' + name]).toInteger()
}


static def findNodeModules(baseDir) {
  def basePath = baseDir.toPath().normalize()
  // Node's module resolution algorithm searches up to the root directory,
  // after which the base path will be null
  while (basePath) {
    def nodeModulesPath = Paths.get(basePath.toString(), "node_modules")
    def reactNativePath = Paths.get(nodeModulesPath.toString(), "react-native")
    if (nodeModulesPath.toFile().exists() && reactNativePath.toFile().exists()) {
      return nodeModulesPath.toString()
    }
    basePath = basePath.getParent()
  }
  throw new GradleException("react-native-cryptopp: Failed to find node_modules/ path!")
}

def nodeModulesPath = findNodeModules(projectDir)

android {
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
  buildToolsVersion getExtOrDefault('buildToolsVersion')
  ndkVersion getExtOrDefault('ndkVersion')

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault('minSdkVersion')
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    versionCode 1
    versionName "1.0"

    ndk {
      abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
    }

    externalNativeBuild {
        cmake {
            cppFlags "-O2", "-fexceptions", "-frtti", "-std=c++1y", "-DONANDROID"
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            arguments "-DANDROID_STL=c++_shared",
                      "-DNODE_MODULES_DIR=${nodeModulesPath}",
                      "-DSDK_ROOT_PATH=${android.sdkDirectory.path}",
                      "-DNDK_ROOT_PATH=${android.ndkDirectory.path}"
        }
    }
  }

  externalNativeBuild {
      cmake {
          path "CMakeLists.txt"
      }
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable 'GradleCompatible'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  buildFeatures {
    prefab true
  }

  packagingOptions {
    excludes = ["**/libc++_shared.so","**/libjsi.so","**/libreactnativejni.so","META-INF/MANIFEST.MF"]
  }
}

repositories {
  mavenCentral()
  jcenter()
  google()
}

dependencies {
  // noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-native:+'
}

